#!/usr/bin/env python
"""
Script para popular o banco de dados com dados de exemplo
"""
import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from apps.core.models import Technology, Template, TemplateStep, CodeSnippet


def create_technologies():
    """Criar tecnologias de exemplo"""
    technologies = [
        {
            'name': 'Django',
            'description': 'Framework web Python para desenvolvimento r√°pido e limpo',
            'icon': 'üêç',
            'color': '#092E20',
            'documentation_url': 'https://docs.djangoproject.com/'
        },
        {
            'name': 'React Native',
            'description': 'Framework para desenvolvimento de apps m√≥veis multiplataforma',
            'icon': 'üì±',
            'color': '#61DAFB',
            'documentation_url': 'https://reactnative.dev/'
        },
        {
            'name': 'Node.js',
            'description': 'Runtime JavaScript para desenvolvimento backend',
            'icon': 'üü¢',
            'color': '#339933',
            'documentation_url': 'https://nodejs.org/'
        },
        {
            'name': 'Flutter',
            'description': 'Framework Google para desenvolvimento de apps multiplataforma',
            'icon': 'ü¶ã',
            'color': '#02569B',
            'documentation_url': 'https://flutter.dev/'
        },
        {
            'name': 'API REST',
            'description': 'Desenvolvimento de APIs RESTful',
            'icon': 'üîó',
            'color': '#FF6B35',
            'documentation_url': 'https://restfulapi.net/'
        }
    ]
    
    created_techs = []
    for tech_data in technologies:
        tech, created = Technology.objects.get_or_create(
            name=tech_data['name'],
            defaults=tech_data
        )
        created_techs.append(tech)
        print(f"{'Criada' if created else 'J√° existe'}: {tech.name}")
    
    return created_techs


def create_django_template(django_tech):
    """Criar template para Django"""
    template, created = Template.objects.get_or_create(
        technology=django_tech,
        name='Adicionar Nova Funcionalidade',
        defaults={
            'description': 'Checklist completo para adicionar uma nova funcionalidade em projetos Django',
            'version': '1.0',
            'is_public': True,
            'created_by_id': 1  # Admin user
        }
    )
    
    if created:
        steps_data = [
            {
                'question': 'Qual √© o objetivo da funcionalidade?',
                'description': 'Descreva claramente o que a funcionalidade deve fazer e qual problema resolve.',
                'step_type': 'text',
                'order': 1
            },
            {
                'question': 'Precisa de um modelo (Model)?',
                'description': 'A funcionalidade vai armazenar dados no banco? Se sim, voc√™ precisar√° criar um novo modelo.',
                'step_type': 'boolean',
                'order': 2
            },
            {
                'question': 'Precisa de autentica√ß√£o/autoriza√ß√£o?',
                'description': 'A funcionalidade ser√° p√∫blica ou depende do login do usu√°rio?',
                'step_type': 'boolean',
                'order': 3
            },
            {
                'question': 'Vai criar rota nova (endpoint)?',
                'description': 'Precisa de uma nova URL para acessar a funcionalidade?',
                'step_type': 'boolean',
                'order': 4
            },
            {
                'question': 'Vai se relacionar com outros modelos?',
                'description': 'A nova funcionalidade vai usar dados de outras tabelas?',
                'step_type': 'boolean',
                'order': 5
            },
            {
                'question': 'Qual tipo de opera√ß√£o √©?',
                'description': 'Selecione o tipo de opera√ß√£o HTTP que ser√° implementada.',
                'step_type': 'choice',
                'choices': ['GET (listar/visualizar)', 'POST (criar)', 'PUT/PATCH (editar)', 'DELETE (remover)', 'M√∫ltiplas opera√ß√µes'],
                'order': 6
            },
            {
                'question': 'Vai impactar a UI ou fluxo do usu√°rio?',
                'description': 'A mudan√ßa afeta a experi√™ncia visual ou l√≥gica do frontend?',
                'step_type': 'boolean',
                'order': 7
            },
            {
                'question': 'Tem alguma regra de neg√≥cio envolvida?',
                'description': 'Descreva qualquer l√≥gica espec√≠fica que deve ser seguida.',
                'step_type': 'text',
                'order': 8
            },
            {
                'question': 'Como vai testar a funcionalidade?',
                'description': 'Descreva como voc√™ vai validar se est√° funcionando corretamente.',
                'step_type': 'text',
                'order': 9
            },
            {
                'question': 'Precisa de migra√ß√µes?',
                'description': 'Se criou/modificou modelos, ser√° necess√°rio gerar e aplicar migra√ß√µes.',
                'step_type': 'boolean',
                'order': 10
            }
        ]
        
        for step_data in steps_data:
            TemplateStep.objects.create(template=template, **step_data)
        
        # Adicionar alguns snippets de c√≥digo
        model_step = template.steps.get(order=2)
        CodeSnippet.objects.create(
            template_step=model_step,
            language='python',
            code='''class MinhaFuncionalidade(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField()
    ativo = models.BooleanField(default=True)
    criado_em = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.nome''',
            description='Exemplo de modelo Django b√°sico'
        )
        
        view_step = template.steps.get(order=4)
        CodeSnippet.objects.create(
            template_step=view_step,
            language='python',
            code='''from rest_framework import viewsets
from .models import MinhaFuncionalidade
from .serializers import MinhaFuncionalidadeSerializer

class MinhaFuncionalidadeViewSet(viewsets.ModelViewSet):
    queryset = MinhaFuncionalidade.objects.all()
    serializer_class = MinhaFuncionalidadeSerializer''',
            description='Exemplo de ViewSet para API REST'
        )
    
    print(f"{'Criado' if created else 'J√° existe'}: Template Django")
    return template


def create_react_native_template(rn_tech):
    """Criar template para React Native"""
    template, created = Template.objects.get_or_create(
        technology=rn_tech,
        name='Criar Nova Tela',
        defaults={
            'description': 'Checklist para criar uma nova tela em aplicativos React Native',
            'version': '1.0',
            'is_public': True,
            'created_by_id': 1
        }
    )
    
    if created:
        steps_data = [
            {
                'question': 'Qual √© o prop√≥sito da tela?',
                'description': 'Descreva o que a tela vai fazer e qual sua fun√ß√£o no app.',
                'step_type': 'text',
                'order': 1
            },
            {
                'question': 'Precisa de navega√ß√£o?',
                'description': 'A tela ser√° acessada atrav√©s de navega√ß√£o? Que tipo?',
                'step_type': 'choice',
                'choices': ['Stack Navigation', 'Tab Navigation', 'Drawer Navigation', 'Modal', 'N√£o precisa'],
                'order': 2
            },
            {
                'question': 'Vai consumir API?',
                'description': 'A tela precisa buscar dados de uma API externa?',
                'step_type': 'boolean',
                'order': 3
            },
            {
                'question': 'Precisa de estado local ou global?',
                'description': 'Como ser√° gerenciado o estado dos dados na tela?',
                'step_type': 'choice',
                'choices': ['useState (local)', 'Context API', 'Redux', 'Zustand', 'N√£o precisa'],
                'order': 4
            },
            {
                'question': 'Vai usar componentes customizados?',
                'description': 'A tela vai precisar de componentes espec√≠ficos criados por voc√™?',
                'step_type': 'boolean',
                'order': 5
            },
            {
                'question': 'Precisa de anima√ß√µes?',
                'description': 'A tela ter√° transi√ß√µes, anima√ß√µes ou efeitos visuais?',
                'step_type': 'boolean',
                'order': 6
            },
            {
                'question': 'Vai funcionar offline?',
                'description': 'A tela precisa funcionar sem conex√£o com internet?',
                'step_type': 'boolean',
                'order': 7
            },
            {
                'question': 'Precisa de permiss√µes do dispositivo?',
                'description': 'A tela vai acessar c√¢mera, localiza√ß√£o, contatos, etc?',
                'step_type': 'text',
                'order': 8
            },
            {
                'question': 'Como vai ser o layout?',
                'description': 'Que tipo de layout e componentes vai usar?',
                'step_type': 'choice',
                'choices': ['ScrollView', 'FlatList', 'SectionList', 'View simples', 'KeyboardAvoidingView'],
                'order': 9
            },
            {
                'question': 'Precisa de valida√ß√£o de formul√°rio?',
                'description': 'A tela tem formul√°rios que precisam ser validados?',
                'step_type': 'boolean',
                'order': 10
            }
        ]
        
        for step_data in steps_data:
            TemplateStep.objects.create(template=template, **step_data)
    
    print(f"{'Criado' if created else 'J√° existe'}: Template React Native")
    return template


def create_api_template(api_tech):
    """Criar template para API REST"""
    template, created = Template.objects.get_or_create(
        technology=api_tech,
        name='Criar Novo Endpoint',
        defaults={
            'description': 'Checklist para criar um novo endpoint de API REST',
            'version': '1.0',
            'is_public': True,
            'created_by_id': 1
        }
    )
    
    if created:
        steps_data = [
            {
                'question': 'Qual √© o recurso que a API vai gerenciar?',
                'description': 'Defina claramente qual entidade/recurso ser√° manipulado.',
                'step_type': 'text',
                'order': 1
            },
            {
                'question': 'Quais m√©todos HTTP vai suportar?',
                'description': 'Selecione os m√©todos que o endpoint vai implementar.',
                'step_type': 'choice',
                'choices': ['GET apenas', 'POST apenas', 'GET e POST', 'CRUD completo (GET, POST, PUT, DELETE)', 'Customizado'],
                'order': 2
            },
            {
                'question': 'Precisa de autentica√ß√£o?',
                'description': 'O endpoint ser√° p√∫blico ou requer autentica√ß√£o?',
                'step_type': 'choice',
                'choices': ['P√∫blico', 'JWT Token', 'API Key', 'OAuth', 'Basic Auth'],
                'order': 3
            },
            {
                'question': 'Qual √© a estrutura dos dados de entrada?',
                'description': 'Descreva o formato JSON que o endpoint vai receber.',
                'step_type': 'code',
                'order': 4
            },
            {
                'question': 'Qual √© a estrutura dos dados de sa√≠da?',
                'description': 'Descreva o formato JSON que o endpoint vai retornar.',
                'step_type': 'code',
                'order': 5
            },
            {
                'question': 'Precisa de valida√ß√£o de dados?',
                'description': 'Que valida√ß√µes ser√£o aplicadas nos dados recebidos?',
                'step_type': 'text',
                'order': 6
            },
            {
                'question': 'Vai ter pagina√ß√£o?',
                'description': 'Para listagens, ser√° implementada pagina√ß√£o?',
                'step_type': 'boolean',
                'order': 7
            },
            {
                'question': 'Precisa de filtros ou busca?',
                'description': 'O endpoint permitir√° filtrar ou buscar dados?',
                'step_type': 'boolean',
                'order': 8
            },
            {
                'question': 'Como vai tratar erros?',
                'description': 'Defina os c√≥digos de erro e mensagens que ser√£o retornados.',
                'step_type': 'text',
                'order': 9
            },
            {
                'question': 'Precisa de documenta√ß√£o?',
                'description': 'Ser√° gerada documenta√ß√£o autom√°tica (Swagger/OpenAPI)?',
                'step_type': 'boolean',
                'order': 10
            }
        ]
        
        for step_data in steps_data:
            TemplateStep.objects.create(template=template, **step_data)
    
    print(f"{'Criado' if created else 'J√° existe'}: Template API REST")
    return template


def main():
    print("üöÄ Populando banco de dados com dados de exemplo...")
    
    # Criar tecnologias
    technologies = create_technologies()
    
    # Encontrar tecnologias espec√≠ficas
    django_tech = next(t for t in technologies if t.name == 'Django')
    rn_tech = next(t for t in technologies if t.name == 'React Native')
    api_tech = next(t for t in technologies if t.name == 'API REST')
    
    # Criar templates
    create_django_template(django_tech)
    create_react_native_template(rn_tech)
    create_api_template(api_tech)
    
    print("\n‚úÖ Dados de exemplo criados com sucesso!")
    print("\nüìä Resumo:")
    print(f"- Tecnologias: {Technology.objects.count()}")
    print(f"- Templates: {Template.objects.count()}")
    print(f"- Etapas: {TemplateStep.objects.count()}")
    print(f"- Snippets: {CodeSnippet.objects.count()}")
    
    print("\nüîó Acesse o admin em: http://localhost:8000/admin/")
    print("   Usu√°rio: admin")
    print("   Senha: admin123")


if __name__ == '__main__':
    main()

